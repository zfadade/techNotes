Python snippits

# Etienne:  example of how I created the file in python, it’s very basic it creates the file where the python script was executed…

def generate_delete_hotelbeds_file(session):
    f = open('hotelbeds-delete.cql', 'w')
    rows = session.execute("SELECT SrcID, ExtID FROM sourcedata.propertyidentity;")
    count = 0
    for row in rows:
        if row.srcid == "hotelbeds":
            count += 1
            print(count)
            f.write("DELETE FROM sourcedata.propertycontact WHERE srcid = 'hotelbeds' AND prvdrid = 'hotelbeds' AND extid = '{}';\n".format(row.extid))


# Printing exception:
   except Exception, e:
        print('migrate_row exception:  {}'.format(e))


# dict constructor / zip function:
 keys = ['a', 'b', 'c']
values = [1, 2, 3]
dictionary = dict(zip(keys, values))
print dictionary
  {'a': 1, 'b': 2, 'c': 3}

####
  @classmethod
def keep_digits(cls, str):
    cleaned = re.sub(r'\D+', '', str.strip())
    return int(cleaned) if cleaned != '' and cleaned is not None else 0



#### Dictionaries
# Two ways to create:
a = {'a' : 2, 'b' : 3}

a = dict([('a', 2), ('b', 3)]);

##### JSON / dicts
# To parse JSON:
import json
json.loads('{"a":1}')
   {u'a': 1}

# Example
json_string = '{"first_name": "Guido", "last_name":"Rossum"}':

# Parse it
parsed_json = json.loads(json_string)

# Can now be used as a normal dictionary:
print(parsed_json['first_name'])
"Guido"

# Convert String to JSON:
d = {
    'first_name': 'Guido',
    'second_name': 'Rossum',
    'titles': ['BDFL', 'Developer'],
}

print(json.dumps(d))

JSON representation of {"answer": [42]} is …. {"answer": [42]}.
If you can read Python, you can read JSON; since all JSON is valid Python code!

# How do you get the JSON representation of an object? It’s simple, just call json.dumps:

import json
obj = {u"answer": [42.2], u"abs": 42}
print(json.dumps(obj))
# output:  {"answer": [42.2], "abs": 42

#### jsonify() vs dumps()
jsonify would be useful when you are building an API someone would query and expect json in return. E.g: The REST github API could use this method to answer your request.

dumps, is more about formating data/python object into json and work on it inside your application. For instance, I need to pass an object to my representation layer where some javascript will display graph. You'll feed javascript with the Json generated by dumps.




## pretty print:  pprint

#### Another way to create multiline strings:   Doesn't add newllines
s = ("this is a very" 
 "long string too" 
"for sure ..." 
 )

 #### Python egg
 pkg_resources
 The .egg-info directories get only created if --single-version-externally-managed was used to install the egg.

 #####
In Python, functions are first-class objects, this means: function references can be passed in inputs to other functions and/or methods, and executed from inside them.

Instances of Classes (aka Objects), can be treated as if they were functions: pass them to other methods/functions and call them. In order to achieve this, the __call__ class function has to be specialized.

def __call__(self, [args ...]) It takes in input a variable number of arguments. Assuming x being an instance of the Class X, x.__call__(1, 2) is analogous to calling x(1,2) or the instance itself as a function.

In Python, __init__() is properly defined as Class Constructor (as well as __del__() is the Class Distructor). Therefore, there is a net distinction between __init__() and __call__(): the first builds an instance of Class up, the second makes such instance callable as a function would be without impacting the lifecycle of the object itself (i.e. __call__ does not impact the construction/destruction lifecycle) but it can modify its internal state (as shown below).


#### How to use variable length argument lists in Python.

The special syntax, *args and **kwargs in function definitions is used to pass a variable number of arguments to a function.
The single asterisk form (*args) is used to pass a non-keyworded, variable-length argument list, and the double asterisk form is used to pass a keyworded, variable-length argument list


######  Static method
class Vehicle(object):
    ...
    @classmethod
    def is_motorcycle(cls):
        return cls.wheels == 2


